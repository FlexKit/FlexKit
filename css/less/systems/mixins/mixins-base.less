// Font-face
//==================================================
.font-face(@fontname; @fontfile; @fontweight : normal; @fontstyle: normal) {
    @font-face{
        font-family : "@{fontname}";
        src         : url("@{fontfile}.eot");
        src         : url("@{fontfile}.eot?#iefix") format("embedded-opentype"),
                      url("@{fontfile}.svg#@{fontname}") format("svg"),
                      url("@{fontfile}.woff") format("woff"),
                      url("@{fontfile}.ttf") format("truetype");
        font-weight : @fontweight;
        font-style  : @fontstyle;
    }
}

// Column-grid system
//==================================================
.column() when (@column-system = true) {
    & when (@responsive = true){
        @responsive-size-tablet-over : (@responsive-size-tablet + 1);
        @media only screen and (min-width : @responsive-size-tablet-over){
            .column-list();
        }
        @responsive-size-mobile-over : (@responsive-size-mobile + 1);
        @media only screen and (max-width : @responsive-size-tablet) and (min-width : @responsive-size-mobile-over){
            .column-list(@columns-tablet; t-);
        }

        @media only screen and (max-width : @responsive-size-mobile){
            .column-list(@columns-mobile; m-);
        }

    }
    & when (@responsive = false){
        .column-list();
    }
}
.column-list(@column : @columns; @prefix : ~''; @num-column : 1; @type : false) when (@column >= @num-column) and (@type = false){
    .@{prefix}column_@{num-column} > *:not(.column-none){
        width : round((100% / @num-column) - @column-margin-width, 3);
    }
    .column-list(@column; @prefix; @num-column + 1; false);
}
.column-list(@column : @columns; @prefix : ~''; @num-column : 1; @type : full-width) when (@column >= @num-column) and (@type = full-width) and  (@column-system-fullWidth = true){
    .full-width{
        &.@{prefix}column_@{num-column} > *:not(.column-none){
            width : round((100% / @num-column) - @column-margin-width + (@column-margin-width / @num-column), 3);
            @num : ~'@{num-column}n + 1';
            &:nth-child(@{num}){
                margin-left : 0 !important;
            }
        }
    }
    .column-list(@column; @prefix; @num-column + 1; full-width);
}
.column-list(@column : @columns; @prefix : ~''; @num-column : 1; @type : margin-none) when (@column >= @num-column) and (@type = margin-none) and (@column-system-marginNone = true){
    .margin-none{
        &.@{prefix}column_@{num-column} > *:not(.column-none){
            width : round(100% / @num-column, 3);
        }
    }
    .column-list(@column; @prefix; @num-column + 1; margin-none);
}

// Grid system
//==================================================
.grid() when (@grid-system = true) {
    & when (@responsive = true){
        @responsive-size-tablet-over : (@responsive-size-tablet + 1);
        @media only screen and (min-width : @responsive-size-tablet-over){
            .grid-list();
        }
        @responsive-size-mobile-over : (@responsive-size-mobile + 1);
        @media only screen and (max-width : @responsive-size-tablet) and (min-width : @responsive-size-mobile-over){
            .grid-list(@grid-columns-tablet, t-);
        }

        @media only screen and (max-width : @responsive-size-mobile){
            .grid-list(@grid-columns-mobile, m-);
        }

    }
    & when (@responsive = false){
        .grid-list();
    }
}
.grid-list(@grid : @grid-columns; @prefix : ~''; @num-column : 1; @switch : true) when (@grid >= @num-column){
    .@{prefix}grid_@{num-column}{
        width : round(percentage((@num-column / @grid)) - @grid-margin-width, 3);
        &.@{prefix}alpha, &.@{prefix}omega{
            & when (@grid-system-alpha-omega = true){
                width : round(percentage(@num-column / @grid) - @grid-margin-width / 2, 3);
            }
        }
        &.@{prefix}alpha.@{prefix}omega{
            & when (@grid-system-alpha-omega = true){
                width : round(percentage(@num-column / @grid), 3);
            }
        }
    }
    .grid-list(@grid; @prefix; @num-column + 1; false);
    .activate-grid-element(@switch);
}

.activate-grid-element(@activate) when (@activate = true){
    .@{prefix}alpha when (@grid-system-alpha-omega = true){ margin-left : 0 !important; }
    .@{prefix}omega when (@grid-system-alpha-omega = true){ margin-right : 0 !important; }
    .prefix(@grid; @prefix; @num-column);
    .suffix(@grid; @prefix; @num-column);
    .push(@grid; @prefix; @num-column);
    .pull(@grid; @prefix; @num-column);
}

.prefix(@grid : @grid-columns; @prefix : ~''; @num-column) when (@grid > @num-column) and  (@grid-system-prefix-suffix = true){
    .@{prefix}prefix_@{num-column}{
        margin-left : round(percentage(@num-column / @grid) + @grid-margin-width / 2, 2) !important;
        &.alpha when (@grid-system-alpha-omega = true){
            margin-left : round(percentage(@num-column / @grid), 2) !important;
        }
    }
    .prefix(@grid; @prefix; @num-column + 1);
}

.suffix(@grid : @grid-columns; @prefix : ~''; @num-column) when (@grid > @num-column) and  (@grid-system-prefix-suffix = true){
    .@{prefix}suffix_@{num-column}{
        margin-right : round(percentage(@num-column / @grid) + @grid-margin-width / 2, 2) !important;
        &.omega when (@grid-system-alpha-omega = true){
            margin-right : round(percentage(@num-column / @grid), 2) !important;
        }
    }
    .suffix(@grid; @prefix; @num-column + 1);
}

.pull(@grid : @grid-columns; @prefix : ~''; @num-column) when (@grid > @num-column) and  (@grid-system-push-pull = true){
    .@{prefix}pull_@{num-column}{
        left : round(percentage(@num-column / @grid) * -1, 2) !important;
    }
    .pull(@grid; @prefix; @num-column + 1);
}

.push(@grid : @grid-columns, @prefix : ~'', @num-column) when (@grid > @num-column) and  (@grid-system-push-pull = true){
    .@{prefix}push_@{num-column}{
        left : round(percentage(@num-column / @grid), 2) !important;
    }
    .push(@grid, @prefix, @num-column + 1);
}

// Margin - Padding
//==================================================
.margin-list(@value; @position:all; @step:5) when (@value >= 0) and not (@value = none){
    @name : e(`(function(){ var a = "@{value}"; return a.replace('%', '').replace('.', '-')}())`);
    .m@{name} when (@position = all){ margin : @value !important; }
    .mt@{name} when (@position = top){ margin-top : @value !important; }
    .ml@{name} when (@position = left){ margin-left : @value !important; }
    .mr@{name} when (@position = right){ margin-right : @value !important; }
    .mb@{name} when (@position = bottom){ margin-bottom : @value !important; }

    .margin-list(@value - @step; @position; @step);
}

.padding-list(@value; @position:all; @step:5) when (@value >= 0) and not (@value = none){
    @name : e(`(function(){ var a = "@{value}"; return a.replace('%', '').replace('.', '-')}())`);
    .p@{name} when (@position = all){ padding : @value !important; }
    .pt@{name} when (@position = top){ padding-top : @value !important; }
    .pl@{name} when (@position = left){ padding-left : @value !important; }
    .pr@{name} when (@position = right){ padding-right : @value !important; }
    .pb@{name} when (@position = bottom){ padding-bottom : @value !important; }

    .padding-list(@value - @step; @position; @step);
}

.position-list(@value; @position; @step:5) when (@value >= 0) and not (@value = none){
    @name : e(`(function(){ var a = "@{value}"; return a.replace('%', '').replace('.', '-')}())`);
    .t@{name} when (@position = top){ top : @value !important; }
    .l@{name} when (@position = left){ left : @value !important; }
    .r@{name} when (@position = right){ right : @value !important; }
    .b@{name} when (@position = bottom){ bottom : @value !important; }

    .position-list(@value - @step; @position; @step);
}

// Width - Height
//==================================================
.width-list(@width; @step:5) when (@width >= 0) and not (@width = none){
    @name : e(`(function(){ var a = "@{width}"; return a.replace('%', '')}())`);
    .w@{name}{ width : @width !important; }

    .width-list(@width - @step; @step);
}
.height-list(@height; @step:5) when (@height >= 0) and not (@height = none){
    @name : e(`(function(){ var a = "@{height}"; return a.replace('%', '')}())`);
    .h@{name}{ height : @height !important; }

    .height-list(@height - @step; @step);
}

// Text overflow
// Requires inline-block or block for proper styling
//==================================================
.text-overflow() {
    overflow      : hidden;
    text-overflow : ellipsis;
    white-space   : nowrap;
}
// Opacity
//==================================================
.opacity(@opacity: 0.5) {
    opacity : @opacity;
    & when (@ie8 = true) and (@ie = true){
        @opperc : @opacity * 100;
        filter : ~"alpha(opacity=@{opperc})";
    }
}

// Display: inline-block
//==================================================
.inline-block-wrap(@valign : middle; @el : ~'>*') {
    font-size : 0;

    @{el}{
        font-size : @font-size-base;
        .inline-block(@valign);
    }
}

.inline-block(@valign : middle) {
    display        : inline-block;
    vertical-align : @valign;
    & when (@ie7 = true) and (@ie = true){
        *zoom    : 1; // Fix for IE7
        *display : inline; // Fix for IE7
    }
}

// Hide text
//==================================================
.hide-text() {
    font        : 0/0 a;
    text-shadow : none;
}

// CSS3 support in ie
//==================================================
.pie() when (@PIE = true){
    behavior : url('../js/system/PIE.php');
}

// -- Grid Elements
.grid-elements(@num-column; @margin : @grid-margin-width; @full: false; @tablet-column : 2; @mobile-column : 1; @style-switch : true) when (@num-column > 0){
    & when (@style-switch = true) and (@full = false){
        margin-left  : unit(@margin / 2, ~"%");
        margin-right : unit(@margin / 2, ~"%");
    }
    & when (@style-switch = true) and (@full = true){
        margin-left  : unit(@margin, ~"%");
        margin-right : 0;
    }
    & when (@full = false){
        width : (100% / @num-column) - @margin;
    }
    & when (@full = true){
        width : (100% / @num-column) - @margin + (@margin / @num-column);

        &:nth-child(n) when (@style-switch = false) and not (@num-column = 1){ margin-left : unit(@margin, ~"%"); }

        @num : ~'@{num-column}n + 1';
        &:nth-child(@{num}) when (@full = true){
            margin-left : 0;
        }
    }
    .grid-elements-device(@tablet-column; @mobile-column; @margin; @full);
}

.grid-elements-device(@tablet-column; @mobile-column; @margin; @full) when (@responsive = true){
    @responsive-size-mobile-over : (@responsive-size-mobile + 1);
    @media only screen and (max-width : @responsive-size-tablet) and  (min-width : @responsive-size-mobile-over){
        .grid-elements(@tablet-column; @margin; @full; 0; 0; false);
    }
    @media only screen and (max-width : @responsive-size-mobile){
        .grid-elements(@mobile-column; @margin; @full; 0; 0; false);
    }
}

// Icon size
//==================================================
.icon-size(@size; @parent : false) when (@size > 0){
    & when (@parent = true){
        width       : @size;
        height      : @size;
        line-height : @size;
    }
    .hide-text();

    &:before{
        font-size : @size;
        & when (@parent = false){
            width  : @size;
            height : @size;
        }
    }

    .hide-text() when not(isem(@size)) and not(ispercentage(@size)){
        font-size : 0;
    }
}

// Social Field
//==================================================
.social-field(@width : 240px; @size : @button-height-base; @padding : 0) when (@social-fields = true){
    .social-field{
        .labeled{
            float  : left;
            margin : 0;
            cursor : pointer;

            & + .labeled{
                margin-left : 5px;
            }

            [class*="icon-"]{
                float       : left;
                font-size   : 0;
                width       : @size;
                height      : @size;
                line-height : @size;

                &:before{
                    font-size : @size - @padding * 2;
                }
            }

            input{
                width       : 0;
                margin-left : -@padding-base-horizontal * 2;
            }

            :checked ~ input{
                margin-left : 0;
                width       : @width;
            }
        }
    }
}

// Resize anything
//==================================================
.resize(@direction:none) {
    resize   : @direction; // Options: horizontal, vertical, both, none
    overflow : auto; // Safari fix
}

// ClearFix
//==================================================
.clearfix() {
    *zoom : 1;

    &:after, &:before{
        content : "";
        display : table;
    }
    &:after{
        clear : both;
    }
}

// Flexbox Layout http://css-tricks.com/snippets/css/a-guide-to-flexbox/
//==================================================
.flexbox() {
    display : -webkit-box;
    display : -moz-box;
    display : -ms-flexbox;
    display : -webkit-flex;
    display : flex;
}

.flex(@values) {
    -webkit-box-flex : @values;
    -moz-box-flex    : @values;
    -webkit-flex     : @values;
    -ms-flex         : @values;
    flex             : @values;
}

.order(@val) {
    -webkit-box-ordinal-group : @val;
    -moz-box-ordinal-group    : @val;
    -ms-flex-order            : @val;
    -webkit-order             : @val;
    order                     : @val;
}